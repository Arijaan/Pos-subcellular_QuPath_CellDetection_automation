library(ggplot2)
library(dplyr)

# ============================================================================
# STEP 1: LOAD AND PREPARE DATA
# ============================================================================

# Select CSV files
cat("Please select the Control CSV file...\n")
control_file <- file.choose()
cat("Please select the T1D CSV file...\n")
t1d_file <- file.choose()

# Read data from columns H and I (8th and 9th columns)
control_raw <- read.csv(control_file)[, c(8, 9)]
t1d_raw <- read.csv(t1d_file)[, c(8, 9)]

# Clean data: convert to numeric and remove invalid rows
control_raw[, 2] <- as.numeric(gsub("[^0-9.-]", "", as.character(control_raw[, 2])))
t1d_raw[, 2] <- as.numeric(gsub("[^0-9.-]", "", as.character(t1d_raw[, 2])))
control_raw <- control_raw[complete.cases(control_raw), ]
t1d_raw <- t1d_raw[complete.cases(t1d_raw), ]

# Add group labels and combine
control_raw$group <- "Control"
t1d_raw$group <- "T1D"
combined_data <- rbind(control_raw, t1d_raw)
colnames(combined_data) <- c("classification", "count", "group")

# ============================================================================
# STEP 2: CALCULATE PERCENTAGES
# ============================================================================

# Calculate total counts for each group (sum of all classifications)
totals <- combined_data %>%
  group_by(group) %>%
  summarise(total = sum(count), .groups = "drop")

# Add totals and calculate percentages
data_with_percentages <- combined_data %>%
  left_join(totals, by = "group") %>%
  mutate(percentage = (count / total) * 100)

# ============================================================================
# STEP 3: STATISTICAL TESTING
# ============================================================================

# Perform proportion tests for each classification
stat_results <- data.frame()
classifications <- unique(data_with_percentages$classification)

for (class_name in classifications) {
  control_data <- filter(data_with_percentages, classification == class_name, group == "Control")
  t1d_data <- filter(data_with_percentages, classification == class_name, group == "T1D")
  
  if (nrow(control_data) > 0 && nrow(t1d_data) > 0) {
    # Perform proportion test
    prop_test <- prop.test(c(control_data$count, t1d_data$count), 
                          c(control_data$total, t1d_data$total))
    
    # Determine significance level
    if (prop_test$p.value < 0.001) {
      sig_level <- "***"
    } else if (prop_test$p.value < 0.01) {
      sig_level <- "**"
    } else if (prop_test$p.value < 0.05) {
      sig_level <- "*"
    } else {
      sig_level <- "ns"
    }
    
    stat_results <- rbind(stat_results, data.frame(
      classification = class_name,
      p_value = prop_test$p.value,
      significance = sig_level
    ))
  }
}

# ============================================================================
# STEP 4: CREATE PLOT
# ============================================================================

# Define the desired order for classifications
classification_order <- c("Num Negative", "Num 1+", "Num 2+", "Num 3+")

# Filter data to only include the desired classifications and reorder
filtered_data <- data_with_percentages %>%
  filter(classification %in% classification_order) %>%
  mutate(classification = factor(classification, levels = classification_order))

# Filter statistical results for the same classifications
filtered_stats <- stat_results %>%
  filter(classification %in% classification_order) %>%
  mutate(classification = factor(classification, levels = classification_order))

# Calculate positions for significance stars (above the higher bar)
max_heights <- filtered_data %>%
  group_by(classification) %>%
  summarise(max_y = max(percentage) * 1.1, .groups = "drop")

# Add significance data for plotting
plot_annotations <- filtered_stats %>%
  left_join(max_heights, by = "classification")

# Create the plot
p <- ggplot(filtered_data, aes(x = classification, y = percentage, fill = group)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8), width = 0.7) +
  geom_text(data = plot_annotations, 
            aes(x = classification, y = max_y, label = significance),
            inherit.aes = FALSE, hjust = 0.5, vjust = 0, size = 5) +
  scale_fill_manual(values = c("Control" = "lightblue", "T1D" = "lightcoral")) +
  labs(
    title = "Control vs T1D",
    x = NULL,
    y = "Percentage (%)",
    fill = "Group"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5)
  )

# Display the plot
print(p)

# Print summary results
cat("\nStatistical Results:\n")
for (i in seq_len(nrow(filtered_stats))) {
  control_pct <- filter(filtered_data, 
                       classification == filtered_stats$classification[i], 
                       group == "Control")$percentage
  t1d_pct <- filter(filtered_data, 
                   classification == filtered_stats$classification[i], 
                   group == "T1D")$percentage
  
  cat(sprintf("%s: Control %.2f%% vs T1D %.2f%% (p = %.2e) %s\n", 
              filtered_stats$classification[i], control_pct, t1d_pct, 
              filtered_stats$p_value[i], filtered_stats$significance[i]))
}


